{
  "openapi": "3.0.0",
  "info": {
    "title": "Porsline",
    "version": "6.10.0",
    "x-logo": {
      "url": "https://porsline.ir/static/website/opt-images/porsline-cover.png"
    },
    "description": "Porsline API Documentation"
  },
  "servers": [
    {
      "url": "https://survey.porsline.ir"
    }
  ],
  "paths": {
    "/api/surveys/{survey_id}/variables/hashes/": {
      "post": {
        "tags": [
          "Hidden Field Encryption"
        ],
        "summary": "Hash hidden fields",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "values"
                ],
                "properties": {
                  "values": {
                    "type": "array",
                    "description": "Each object represents map of variable names to variable values related to a respondent to be encrypted. Keys are variable names and values are variable values. For example, if I have two variables named `name` and `land` and the corresponding values are `Alice` and `Wonder land` and I want the respondent to be able to response only one, the request body is as the Request Sample",
                    "maxItems": 5000,
                    "items": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string",
                        "description": "Each property is a variable name and the value is the variable value"
                      },
                      "example": {
                        "name": "Alice",
                        "land": "Wonder land",
                        "is_unique": true
                      },
                      "properties": {
                        "is_unique": {
                          "type": "boolean",
                          "default": false,
                          "description": "`Optional property` If you'd like this respondent (to the generated link) to be able to response only once, add this property to its variable key-values."
                        },
                        "expiration_date_time": {
                          "type": "string",
                          "pattern": "^20\\d{2}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}$",
                          "description": "`Optional property` If you'd like this respondent (or the generated link) to have an expiration date, add this property to its variable key-values. i.e. 2020-04-02 16:20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "description": "some description"
        },
        "responses": {
          "200": {
            "description": "Returns the generated encrypted urls",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "urls": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "https://survey.porsline.ir/s/{survey_code}/?qs={hash 1}"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/surveys/561934/variables/hashes/\"\n\npayload = json.dumps({\n  \"values\": [\n    {\n      \"myvar\": \"value1\",\n      \"is_unique\": False\n    },\n    {\n      \"myvar\": \"value2\",\n      \"is_unique\": False\n    },\n    {\n      \"myvar\": \"value3\",\n      \"is_unique\": False\n    }\n  ]\n})\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/surveys/561934/variables/hashes/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\"values\":[{\"myvar\":\"value1\",\"is_unique\":false},{\"myvar\":\"value2\",\"is_unique\":false},{\"myvar\":\"value3\",\"is_unique\":false}]}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Post, \"https://survey.porsline.ir/api/surveys/405034/variables/hashes/\")\n{\nContent = new StringContent(@\"{\"\"values\"\":[{\"\"myvar\"\":\"\"value1\"\",\"\"is_unique\"\":false},{\"\"myvar\"\":\"\"value2\"\",\"\"is_unique\"\":false},{\"\"myvar\"\":\"\"value3\"\",\"\"is_unique\"\":false}]}\", Encoding.UTF8, \"application/json\")\n};\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'https://survey.porsline.ir/api/surveys/561934/variables/hashes/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    \"values\": [\n      {\n        \"myvar\": \"value1\",\n        \"is_unique\": false\n      },\n      {\n        \"myvar\": \"value2\",\n        \"is_unique\": false\n      },\n      {\n        \"myvar\": \"value3\",\n        \"is_unique\": false\n      }\n    ]\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      }
    },
    "/api/surveys/{survey_id}/variables/": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get list of survey variables",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns survey variables objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Variable's ID"
                      },
                      "name": {
                        "type": "string",
                        "description": "Variable's name"
                      },
                      "variable_source": {
                        "type": "integer",
                        "description": "0 if its source is query string and 0 for other sources"
                      },
                      "type": {
                        "type": "integer",
                        "description": "1 if its type is string and 2 if its type is integer"
                      },
                      "has_response": {
                        "type": "boolean",
                        "description": ""
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/surveys/561934/variables/\"\n\npayload = \"\"\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/surveys/561934/variables/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Get, \"https://survey.porsline.ir/api/surveys/405034/variables/\");\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'https://survey.porsline.ir/api/surveys/561934/variables/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Variables"
        ],
        "summary": "Create new variables",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "required": [
                    "name",
                    "variable_source"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Variable's ID"
                    },
                    "name": {
                      "type": "string",
                      "description": "Variable's name"
                    },
                    "variable_source": {
                      "type": "integer",
                      "description": "0 if its source is query string and 0 for other sources"
                    },
                    "type": {
                      "type": "integer",
                      "description": "1 if its type is string and 2 if its type is integer"
                    },
                    "has_response": {
                      "type": "boolean",
                      "description": ""
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the generated encrypted urls",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/surveys/561934/variables/\"\n\npayload = json.dumps({\n  \"variables\": [\n    {\n      \"name\": \"myvar\",\n      \"variable_source\": 1\n    }\n  ]\n})\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/surveys/561934/variables/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\"variables\":[{\"name\":\"myvar\",\"variable_source\":1}]}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"https://survey.porsline.ir/api/surveys/561934/variables/\");\nclient.Timeout = -1;\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"Authorization\", \"API-Key ****************************\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nvar body = @\"{\"\"variables\"\":[{\"\"name\"\":\"\"myvar\"\",\"\"variable_source\"\":1}]}\";\nrequest.AddParameter(\"application/json\", body,  ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\nConsole.WriteLine(response.Content);"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'https://survey.porsline.ir/api/surveys/561934/variables/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    \"variables\": [\n      {\n        \"name\": \"myvar\",\n        \"variable_source\": 1\n      }\n    ]\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      }
    },
    "/api/folders/": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get list of user's folders",
        "responses": {
          "200": {
            "description": "Returns the new folder object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/folders/\"\n\npayload = \"\"\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/folders/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"https://survey.porsline.ir/api/folders/\");\nclient.Timeout = -1;\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"API-Key ****************************\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nvar body = @\"\";\nrequest.AddParameter(\"application/json\", body,  ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\nConsole.WriteLine(response.Content);"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'https://survey.porsline.ir/api/folders/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Create a new folder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the new folder",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "order": {
                    "type": "integer",
                    "description": "The folder's order. if not sent, the order will be set to highest"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the new folder object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/folders/\n\npayload = json.dumps({\n  \"name\": \"new folder\"\n})\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/folders/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\"name\": \"new folder\"}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Post, \"https://survey.porsline.ir/api/surveys/561934/responses/\")\n{\nContent = new StringContent(\"{\\\"name\\\": \\\"new folder\\\"}\", Encoding.UTF8, \"application/json\")\n};\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'https://survey.porsline.ir/api/folders/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    \"name\": \"new folder\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      }
    },
    "/api/folders/{folder_id}/": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get an existing folder",
        "parameters": [
          {
            "in": "path",
            "name": "folder_id",
            "schema": {
              "type": "string"
            },
            "description": "Selected folder id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the folder object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/folders/8/\"\n\npayload = \"\"\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/folders/8/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Get, \"https://survey.porsline.ir/api/folders/8/\");\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'https://survey.porsline.ir/api/folders/8/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Folders"
        ],
        "summary": "Update an existing folder",
        "parameters": [
          {
            "in": "path",
            "name": "folder_id",
            "schema": {
              "type": "string",
              "required": [
                "true"
              ]
            },
            "description": "Selected folder id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the folder",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "order": {
                    "type": "integer",
                    "description": "The folder's order. if not sent, the order will be set to highest"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the folder object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Folder's ID"
                    },
                    "order": {
                      "type": "integer",
                      "description": "Folder's location among other folders"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the folder",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/folders/8/\"\n\npayload = json.dumps({\n  \"name\": \"new folder name\",\n  \"order\": 1\n})\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/folders/8/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'PUT',\n  CURLOPT_POSTFIELDS =>'{\"name\": \"new folder name\", \"order\": 1}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Put, \"https://survey.porsline.ir/api/folders/8/\")\n{\n  Content = new StringContent(\"{\\\"name\\\": \\\"new folder name\\\", \\\"order\\\": 1}\", Encoding.UTF8, \"application/json\")\n};\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'PUT',\n  'url': 'https://survey.porsline.ir/api/folders/8/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    \"name\": \"new folder name\",\n    \"order\": 1\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      },
      "patch": {
        "tags": [
          "Folders"
        ],
        "summary": "Partially update the folder",
        "parameters": [
          {
            "in": "path",
            "name": "folder_id",
            "schema": {
              "type": "string",
              "required": [
                "true"
              ]
            },
            "description": "Selected folder id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the folder",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "order": {
                    "type": "integer",
                    "description": "The folder's order. if not sent, the order will be set to highest"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the folder object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Folder's ID"
                    },
                    "order": {
                      "type": "integer",
                      "description": "Folder's location among other folders"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the Folder",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/folders/8/\"\n\npayload = json.dumps({\n  \"name\": \"new folder name\",\n  \"order\": 1\n})\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/folders/8/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'PATCH',\n  CURLOPT_POSTFIELDS =>'{\"name\": \"new folder name\", \"order\": 1}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Patch, \"https://survey.porsline.ir/api/folders/8/\")\n{\n  Content = new StringContent(\"{\\\"name\\\": \\\"new folder name\\\", \\\"order\\\": 1}\", Encoding.UTF8, \"application/json\")\n};\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'PATCH',\n  'url': 'https://survey.porsline.ir/api/folders/8/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    \"name\": \"new folder name\",\n    \"order\": 1\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Folders"
        ],
        "summary": "Delete an existing folder",
        "parameters": [
          {
            "in": "path",
            "name": "folder_id",
            "schema": {
              "type": "string",
              "required": [
                "true"
              ]
            },
            "description": "Selected folder id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/folders/8/\"\n\npayload = \"\"\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/folders/8/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'DELETE',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Delete, \"https://survey.porsline.ir/api/folders/8/\");\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'DELETE',\n  'url': 'https://survey.porsline.ir/api/folders/8/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      }
    },
    "/api/surveys/{survey_id}/settings/": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get survey's settings",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the settings object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "survey": {
                      "type": "object",
                      "description": "Survey's settings",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Determines survey name",
                          "example": "Porsline Survey"
                        },
                        "language": {
                          "type": "integer",
                          "description": "Determines survey language<br>Will be one of 1: English, 2: Persian, 3: Turkish, 4: Arabic",
                          "example": 1
                        },
                        "is_stopped": {
                          "type": "boolean",
                          "description": "Whether survey should be stopped or not"
                        }
                      }
                    },
                    "authentication_needed": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>Whether there should be a Porsline or code authentication or not"
                    },
                    "porsline_auth": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>Whether there should be a Porsline authentication or not"
                    },
                    "porsline_auth_no_spam": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>Whether there should be a single response per Porsline user or not"
                    },
                    "porsline_auth_domains": {
                      "type": "array",
                      "description": "Enterprise feature<br>List of allowed emails in regex",
                      "items": {
                        "type": "string",
                        "description": "An allowed email regex for authentication",
                        "minLength": 1,
                        "maxLength": 60
                      },
                      "example": [
                        "*@porsline.ir",
                        "*@team.porsline.ir"
                      ]
                    },
                    "code_auth": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>Whether there should be a Code authentication or not"
                    },
                    "code_auth_is_unique": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>Whether there should be a single response per entry code or not"
                    },
                    "code_authentication_file_name": {
                      "type": "string",
                      "description": "Enterprise feature<br>The uploaded file name",
                      "minLength": 1,
                      "maxLength": 500
                    },
                    "auth_description": {
                      "type": "string",
                      "description": "Enterprise feature<br>Authentication description",
                      "minLength": 1,
                      "maxLength": 1000
                    },
                    "captcha_needed": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>"
                    },
                    "hidden_responder_details": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>"
                    },
                    "privacy_preserving_message_enabled": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>"
                    },
                    "no_spam": {
                      "type": "boolean",
                      "description": "Pro feature<br>Whether there should be a single response per browser or not. Can't be combined with tag_spam"
                    },
                    "tag_spam": {
                      "type": "boolean",
                      "description": "Pro feature<br>Whether the responders using the same browser should be tagged as spam or not. Can't be combined with no_spam"
                    },
                    "location_is_active": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>Whether to get responder's location or not"
                    },
                    "location_is_required": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>Whether the responder's location is required or not"
                    },
                    "location_description": {
                      "type": "string",
                      "description": "Enterprise feature<br>Description on why would you want to gather responder's location",
                      "minLength": 1,
                      "maxLength": 1000
                    },
                    "hide_next_button": {
                      "type": "boolean",
                      "description": "Whether to hide next button for responders"
                    },
                    "hide_previous_button": {
                      "type": "boolean",
                      "description": "Whether to hide previous button for responders"
                    },
                    "hide_progressbar": {
                      "type": "boolean",
                      "description": "Whether to hide progress bar for responders"
                    },
                    "expiration_date": {
                      "type": "string",
                      "format": "date",
                      "description": "The date to close the survey. must be after today"
                    },
                    "responding_ duration": {
                      "type": "string",
                      "format": "duration",
                      "example": "01:20:00",
                      "description": "The time each responder has to respond to the survey"
                    },
                    "edit_response_enabled": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>Whether the responders are able to edit their response or not<br>Has to be activated for user"
                    },
                    "branding_removal": {
                      "type": "boolean",
                      "description": "Enterprise feature<br>Whether the porsline branding may be used or not<br>Has to be activated for user"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/surveys/561934/settings/\"\n\npayload = \"\"\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/surveys/561934/settings/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Get, \"https://survey.porsline.ir/api/surveys/561934/settings/\");\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'https://survey.porsline.ir/api/surveys/561934/settings/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      },
      "patch": {
        "tags": [
          "Settings"
        ],
        "summary": "Update survey's settings",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "survey": {
                    "type": "object",
                    "description": "Survey's settings",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Determines survey name",
                        "example": "Porsline Survey"
                      },
                      "language": {
                        "type": "integer",
                        "description": "Determines survey language<br>Will be one of 1: English, 2: Persian, 3: Turkish, 4: Arabic",
                        "example": 1
                      },
                      "is_stopped": {
                        "type": "boolean",
                        "description": "Whether survey should be stopped or not"
                      }
                    }
                  },
                  "authentication_needed": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Whether there should be a Porsline or code authentication or not"
                  },
                  "porsline_auth": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Whether there should be a Porsline authentication or not"
                  },
                  "porsline_auth_no_spam": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Whether there should be a single response per Porsline user or not"
                  },
                  "porsline_auth_domains": {
                    "type": "array",
                    "description": "Enterprise feature<br>List of allowed emails in regex",
                    "items": {
                      "type": "string",
                      "description": "An allowed email regex for authentication",
                      "minLength": 1,
                      "maxLength": 60
                    },
                    "example": [
                      "*@porsline.ir",
                      "*@team.porsline.ir"
                    ]
                  },
                  "code_auth": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Whether there should be a Code authentication or not"
                  },
                  "code_auth_is_unique": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Whether there should be a single response per entry code or not"
                  },
                  "code_authentication_file_name": {
                    "type": "string",
                    "description": "Enterprise feature<br>The uploaded file name",
                    "minLength": 1,
                    "maxLength": 500
                  },
                  "auth_description": {
                    "type": "string",
                    "description": "Enterprise feature<br>Authentication description",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "captcha_needed": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Captcha will be needed to view survey"
                  },
                  "hidden_responder_details": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Hide responder details from survey creator"
                  },
                  "privacy_preserving_message_enabled": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Show message from Porsline to confirm responder details will be hidden"
                  },
                  "no_spam": {
                    "type": "boolean",
                    "description": "Pro feature<br>Whether there should be a single response per browser or not. Can't be combined with tag_spam"
                  },
                  "tag_spam": {
                    "type": "boolean",
                    "description": "Pro feature<br>Whether the responders using the same browser should be tagged as spam or not. Can't be combined with no_spam"
                  },
                  "location_is_active": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Whether to get responder's location or not"
                  },
                  "location_is_required": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Whether the responder's location is required or not"
                  },
                  "location_description": {
                    "type": "string",
                    "description": "Enterprise feature<br>Description on why would you want to gather responder's location",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "hide_next_button": {
                    "type": "boolean",
                    "description": "Whether to hide next button for responders"
                  },
                  "hide_previous_button": {
                    "type": "boolean",
                    "description": "Whether to hide previous button for responders"
                  },
                  "hide_progressbar": {
                    "type": "boolean",
                    "description": "Whether to hide progress bar for responders"
                  },
                  "expiration_date": {
                    "type": "string",
                    "format": "date",
                    "description": "The date to close the survey. must be after today"
                  },
                  "responding_ duration": {
                    "type": "string",
                    "format": "duration",
                    "example": "01:20:00",
                    "description": "The time each responder has to respond to the survey"
                  },
                  "edit_response_enabled": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Whether the responders are able to edit their response or not<br>Has to be activated for user"
                  },
                  "branding_removal": {
                    "type": "boolean",
                    "description": "Enterprise feature<br>Whether the porsline branding may be used or not<br>Has to be activated for user"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the settings object"
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/surveys/561934/settings/\"\n\npayload = json.dumps({\n  \"auth_description\": \"Please enter your staff ID.\",\n  \"authentication_needed\": False,\n  \"code_auth\": True,\n  \"location_is_active\": True,\n  \"porsline_auth\": False\n})\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/surveys/561934/settings/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'PATCH',\n  CURLOPT_POSTFIELDS =>'{\"auth_description\":\"Please enter your staff ID.\",\"authentication_needed\":false,\"code_auth\":true,\"location_is_active\":true,\"porsline_auth\":false}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Patch, \"https://survey.porsline.ir/api/surveys/561934/settings/\")\n{\nContent = new StringContent(\"{\\\"auth_description\\\":\\\"Please enter your staff ID.\\\",\\\"authentication_needed\\\":false,\\\"code_auth\\\":true,\\\"location_is_active\\\":true,\\\"porsline_auth\\\":false}\", Encoding.UTF8, \"application/json\");\n}\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'PATCH',\n  'url': 'https://survey.porsline.ir/api/surveys/561934/settings/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    \"auth_description\": \"Please enter your staff ID.\",\n    \"authentication_needed\": false,\n    \"code_auth\": true,\n    \"location_is_active\": true,\n    \"porsline_auth\": false\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      }
    },
    "/api/surveys/{survey_id}/settings/authentication-codes/": {
      "get": {
        "tags": [
          "Authentication codes"
        ],
        "summary": "Get survey's authentication codes",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "string",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "string",
              "default": 500
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the authentication codes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Number of codes",
                      "example": 3
                    },
                    "next": {
                      "type": "string",
                      "format": "link",
                      "description": "Link to the next page",
                      "example": null
                    },
                    "previous": {
                      "type": "string",
                      "format": "link",
                      "description": "Link to the previous page",
                      "example": null
                    },
                    "results": {
                      "type": "array",
                      "description": "List of survey codes",
                      "items": {
                        "type": "string",
                        "description": "Code name",
                        "minLength": 1,
                        "maxLength": 30
                      },
                      "example": [
                        "code_1",
                        "code_2",
                        "code_3"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/?page=1&page_size=1000\"\n\npayload = \"\"\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/?page=1&page_size=1000',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Get, \"https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/?page=1&page_size=1000\");\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/?page=1&page_size=1000',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Authentication codes"
        ],
        "summary": "Create new authentication codes",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "maxItems": 5000,
                "items": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 30
                },
                "example": [
                  "code_1",
                  "code_2",
                  "code_3"
                ],
                "description": "Codes to be created"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created codes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 30
                  },
                  "example": [
                    "code_1",
                    "code_2",
                    "code_3"
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/\"\n\npayload = json.dumps([\n  \"code1\",\n  \"code2\",\n  \"code3\"\n])\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'[\"code1\", \"code2\", \"code3\"]',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Post, \"https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/\")\n{\nContent = new StringContent(\"[\"code1\", \"code2\", \"code3\"]\", Encoding.UTF8, \"application/json\");\n}\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify([\n    \"code1\",\n    \"code2\",\n    \"code3\"\n  ])\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Authentication codes"
        ],
        "summary": "Delete survey's authentication codes",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "maxItems": 5000,
                "items": {
                  "type": "string",
                  "maxLength": 30
                },
                "example": [],
                "description": "Codes to be deleted"
              }
            }
          },
          "description": "If there is no body, all the codes will be deleted"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/\n\npayload = \"\"\nheaders = {\n  'Authorization': 'API-Key ****************************',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'DELETE',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: API-Key ****************************',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Token ****************************\");\nvar webRequest = new HttpRequestMessage(HttpMethod.Delete, \"https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/\");\nvar response = client.Send(webRequest);\nusing var reader = new StreamReader(response.Content.ReadAsStream());\nConsole.WriteLine(reader.ReadToEnd());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'DELETE',\n  'url': 'https://survey.porsline.ir/api/surveys/561934/settings/authentication-codes/',\n  'headers': {\n    'Authorization': 'API-Key ****************************',\n    'Content-Type': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      }
    },
    "/api/v2/surveys/{survey_id}/": {
      "get": {
        "tags": [
          "Survey"
        ],
        "summary": "Retrieve survey",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the authentication codes",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Survey"
                    }
                  ],
                  "properties": {
                    "subdomain": {
                      "$ref": "#/components/schemas/UserSubdomain"
                    },
                    "shared_by": {
                      "type": "object",
                      "description": "Details of owner of the folder if it's shared with request user",
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        },
                        "user_type": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            1,
                            2,
                            3
                          ],
                          "description": "\"1: free, 2: pro, 3: enterprise\""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Survey"
        ],
        "summary": "Delete survey",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "responses": {
          "204": {
            "description": "Survey with id = pk has been deleted and added to Trash."
          }
        }
      }
    },
    "/api/v2/surveys/{survey_id}/questions/": {
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Create Question",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WelcomeQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/TextQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/MultipleChoiceQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/PictureChoiceQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/StatementQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/OpinionScaleQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/RatingQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/GroupQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/Appreciation"
                  },
                  {
                    "$ref": "#/components/schemas/DropDownChoice"
                  },
                  {
                    "$ref": "#/components/schemas/RankingQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/UploadFileQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/MatrixQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/PaymentQuestion"
                  }
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MultipleChoiceQuestion"
                    },
                    {
                      "$ref": "#/components/schemas/MatrixQuestion"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/v2/surveys/<integer>/questions/\"\n\npayload = json.dumps({\n  \"title\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"html_title\": \"<string>\",\n  \"image_video_active\": False,\n  \"image_or_video\": 1,\n  \"image_path\": \"<string>\",\n  \"image_name\": \"<string>\",\n  \"video_url\": \"<string>\",\n  \"show_charts\": True,\n  \"description_text_active\": False,\n  \"description_text\": \"<string>\",\n  \"html_description_text\": \"<string>\",\n  \"related_group\": \"<integer>\",\n  \"question_number_is_hidden\": False,\n  \"prior_question\": \"<integer>\",\n  \"responding_duration\": \"<string>\",\n  \"title_active\": True,\n  \"description_active\": False,\n  \"description\": \"<string>\",\n  \"enter_text\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/v2/surveys/<integer>/questions/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"title\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"html_title\": \"<string>\",\n    \"image_video_active\": false,\n    \"image_or_video\": 1,\n    \"image_path\": \"<string>\",\n    \"image_name\": \"<string>\",\n    \"video_url\": \"<string>\",\n    \"show_charts\": true,\n    \"description_text_active\": false,\n    \"description_text\": \"<string>\",\n    \"html_description_text\": \"<string>\",\n    \"related_group\": \"<integer>\",\n    \"question_number_is_hidden\": false,\n    \"prior_question\": \"<integer>\",\n    \"responding_duration\": \"<string>\",\n    \"title_active\": true,\n    \"description_active\": false,\n    \"description\": \"<string>\",\n    \"enter_text\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Authorization: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"https://survey.porsline.ir/api/v2/surveys/<integer>/questions/\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nrequest.Headers.Add(\"Authorization\", \"\");\nvar content = new StringContent(\"{\\n\\t\\\"title\\\": \\\"<string>\\\",\\n\\t\\\"type\\\": \\\"<integer>\\\",\\n\\t\\\"id\\\": \\\"<integer>\\\",\\n\\t\\\"html_title\\\": \\\"<string>\\\",\\n\\t\\\"image_video_active\\\": false,\\n\\t\\\"image_or_video\\\": 1,\\n\\t\\\"image_path\\\": \\\"<string>\\\",\\n\\t\\\"image_name\\\": \\\"<string>\\\",\\n\\t\\\"video_url\\\": \\\"<string>\\\",\\n\\t\\\"show_charts\\\": true,\\n\\t\\\"description_text_active\\\": false,\\n\\t\\\"description_text\\\": \\\"<string>\\\",\\n\\t\\\"html_description_text\\\": \\\"<string>\\\",\\n\\t\\\"related_group\\\": \\\"<integer>\\\",\\n\\t\\\"question_number_is_hidden\\\": false,\\n\\t\\\"prior_question\\\": \\\"<integer>\\\",\\n\\t\\\"responding_duration\\\": \\\"<string>\\\",\\n\\t\\\"title_active\\\": true,\\n\\t\\\"description_active\\\": false,\\n\\t\\\"description\\\": \\\"<string>\\\",\\n\\t\\\"enter_text\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'https://survey.porsline.ir/api/v2/surveys/<integer>/questions/',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Authorization': ''\n  },\n  body: JSON.stringify({\n    \"title\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"html_title\": \"<string>\",\n    \"image_video_active\": false,\n    \"image_or_video\": 1,\n    \"image_path\": \"<string>\",\n    \"image_name\": \"<string>\",\n    \"video_url\": \"<string>\",\n    \"show_charts\": true,\n    \"description_text_active\": false,\n    \"description_text\": \"<string>\",\n    \"html_description_text\": \"<string>\",\n    \"related_group\": \"<integer>\",\n    \"question_number_is_hidden\": false,\n    \"prior_question\": \"<integer>\",\n    \"responding_duration\": \"<string>\",\n    \"title_active\": true,\n    \"description_active\": false,\n    \"description\": \"<string>\",\n    \"enter_text\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      }
    },
    "/api/v2/surveys/{survey_id}/questions/{id}/": {
      "patch": {
        "tags": [
          "Questions"
        ],
        "summary": "Update Question",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MultipleChoiceQuestion"
                  },
                  {
                    "$ref": "#/components/schemas/MatrixQuestion"
                  }
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "duplicate",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "example": "true"
          },
          {
            "$ref": "#/components/parameters/SurveyID"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MultipleChoiceQuestion"
                    },
                    {
                      "$ref": "#/components/schemas/MatrixQuestion"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/v2/surveys/<integer>/questions/<integer>/?duplicate=<string>\"\n\npayload = json.dumps({\n  \"title\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"html_title\": \"<string>\",\n  \"image_video_active\": False,\n  \"image_or_video\": 1,\n  \"image_path\": \"<string>\",\n  \"image_name\": \"<string>\",\n  \"video_url\": \"<string>\",\n  \"show_charts\": True,\n  \"description_text_active\": False,\n  \"description_text\": \"<string>\",\n  \"html_description_text\": \"<string>\",\n  \"related_group\": \"<integer>\",\n  \"question_number_is_hidden\": False,\n  \"prior_question\": \"<integer>\",\n  \"responding_duration\": \"<string>\",\n  \"allow_multiple_select\": False,\n  \"max_selectable_choices\": 2,\n  \"min_selectable_choices\": 2,\n  \"vertical_choices\": False,\n  \"answer_required\": False,\n  \"randomize\": False,\n  \"correct_choice_id\": \"<integer>\",\n  \"correct_choice\": {\n    \"name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"alt_name\": \"<string>\",\n    \"hidden\": False,\n    \"choice_type\": 1\n  },\n  \"related_matrix_question\": \"<integer>\",\n  \"choices\": [\n    {\n      \"name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"alt_name\": \"<string>\",\n      \"hidden\": False,\n      \"choice_type\": 1\n    },\n    {\n      \"name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"alt_name\": \"<string>\",\n      \"hidden\": False,\n      \"choice_type\": 1\n    }\n  ]\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': ''\n}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/v2/surveys/<integer>/questions/<integer>/?duplicate=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'PATCH',\n  CURLOPT_POSTFIELDS =>'{\n    \"title\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"html_title\": \"<string>\",\n    \"image_video_active\": false,\n    \"image_or_video\": 1,\n    \"image_path\": \"<string>\",\n    \"image_name\": \"<string>\",\n    \"video_url\": \"<string>\",\n    \"show_charts\": true,\n    \"description_text_active\": false,\n    \"description_text\": \"<string>\",\n    \"html_description_text\": \"<string>\",\n    \"related_group\": \"<integer>\",\n    \"question_number_is_hidden\": false,\n    \"prior_question\": \"<integer>\",\n    \"responding_duration\": \"<string>\",\n    \"allow_multiple_select\": false,\n    \"max_selectable_choices\": 2,\n    \"min_selectable_choices\": 2,\n    \"vertical_choices\": false,\n    \"answer_required\": false,\n    \"randomize\": false,\n    \"correct_choice_id\": \"<integer>\",\n    \"correct_choice\": {\n        \"name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"alt_name\": \"<string>\",\n        \"hidden\": false,\n        \"choice_type\": 1\n    },\n    \"related_matrix_question\": \"<integer>\",\n    \"choices\": [\n        {\n            \"name\": \"<string>\",\n            \"id\": \"<integer>\",\n            \"alt_name\": \"<string>\",\n            \"hidden\": false,\n            \"choice_type\": 1\n        },\n        {\n            \"name\": \"<string>\",\n            \"id\": \"<integer>\",\n            \"alt_name\": \"<string>\",\n            \"hidden\": false,\n            \"choice_type\": 1\n        }\n    ]\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Authorization: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Patch, \"https://survey.porsline.ir/api/v2/surveys/<integer>/questions/<integer>/?duplicate=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nrequest.Headers.Add(\"Authorization\", \"\");\nvar content = new StringContent(\"{\\n\\t\\\"title\\\": \\\"<string>\\\",\\n\\t\\\"type\\\": \\\"<integer>\\\",\\n\\t\\\"id\\\": \\\"<integer>\\\",\\n\\t\\\"html_title\\\": \\\"<string>\\\",\\n\\t\\\"image_video_active\\\": false,\\n\\t\\\"image_or_video\\\": 1,\\n\\t\\\"image_path\\\": \\\"<string>\\\",\\n\\t\\\"image_name\\\": \\\"<string>\\\",\\n\\t\\\"video_url\\\": \\\"<string>\\\",\\n\\t\\\"show_charts\\\": true,\\n\\t\\\"description_text_active\\\": false,\\n\\t\\\"description_text\\\": \\\"<string>\\\",\\n\\t\\\"html_description_text\\\": \\\"<string>\\\",\\n\\t\\\"related_group\\\": \\\"<integer>\\\",\\n\\t\\\"question_number_is_hidden\\\": false,\\n\\t\\\"prior_question\\\": \\\"<integer>\\\",\\n\\t\\\"responding_duration\\\": \\\"<string>\\\",\\n\\t\\\"allow_multiple_select\\\": false,\\n\\t\\\"max_selectable_choices\\\": 2,\\n\\t\\\"min_selectable_choices\\\": 2,\\n\\t\\\"vertical_choices\\\": false,\\n\\t\\\"answer_required\\\": false,\\n\\t\\\"randomize\\\": false,\\n\\t\\\"correct_choice_id\\\": \\\"<integer>\\\",\\n\\t\\\"correct_choice\\\": {\\n\\t\\t\\\"name\\\": \\\"<string>\\\",\\n\\t\\t\\\"id\\\": \\\"<integer>\\\",\\n\\t\\t\\\"alt_name\\\": \\\"<string>\\\",\\n\\t\\t\\\"hidden\\\": false,\\n\\t\\t\\\"choice_type\\\": 1\\n\\t},\\n\\t\\\"related_matrix_question\\\": \\\"<integer>\\\",\\n\\t\\\"choices\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"<string>\\\",\\n\\t\\t\\t\\\"id\\\": \\\"<integer>\\\",\\n\\t\\t\\t\\\"alt_name\\\": \\\"<string>\\\",\\n\\t\\t\\t\\\"hidden\\\": false,\\n\\t\\t\\t\\\"choice_type\\\": 1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"<string>\\\",\\n\\t\\t\\t\\\"id\\\": \\\"<integer>\\\",\\n\\t\\t\\t\\\"alt_name\\\": \\\"<string>\\\",\\n\\t\\t\\t\\\"hidden\\\": false,\\n\\t\\t\\t\\\"choice_type\\\": 1\\n\\t\\t}\\n\\t]\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'PATCH',\n  'url': 'https://survey.porsline.ir/api/v2/surveys/<integer>/questions/<integer>/?duplicate=<string>',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Authorization': ''\n  },\n  body: JSON.stringify({\n    \"title\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"html_title\": \"<string>\",\n    \"image_video_active\": false,\n    \"image_or_video\": 1,\n    \"image_path\": \"<string>\",\n    \"image_name\": \"<string>\",\n    \"video_url\": \"<string>\",\n    \"show_charts\": true,\n    \"description_text_active\": false,\n    \"description_text\": \"<string>\",\n    \"html_description_text\": \"<string>\",\n    \"related_group\": \"<integer>\",\n    \"question_number_is_hidden\": false,\n    \"prior_question\": \"<integer>\",\n    \"responding_duration\": \"<string>\",\n    \"allow_multiple_select\": false,\n    \"max_selectable_choices\": 2,\n    \"min_selectable_choices\": 2,\n    \"vertical_choices\": false,\n    \"answer_required\": false,\n    \"randomize\": false,\n    \"correct_choice_id\": \"<integer>\",\n    \"correct_choice\": {\n      \"name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"alt_name\": \"<string>\",\n      \"hidden\": false,\n      \"choice_type\": 1\n    },\n    \"related_matrix_question\": \"<integer>\",\n    \"choices\": [\n      {\n        \"name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"alt_name\": \"<string>\",\n        \"hidden\": false,\n        \"choice_type\": 1\n      },\n      {\n        \"name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"alt_name\": \"<string>\",\n        \"hidden\": false,\n        \"choice_type\": 1\n      }\n    ]\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      },
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get Question",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MultipleChoiceQuestion"
                    },
                    {
                      "$ref": "#/components/schemas/MatrixQuestion"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Questions"
        ],
        "summary": "Delete Question",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/v2/surveys/{survey_id}/responses/results-table/": {
      "get": {
        "tags": [
          "Results"
        ],
        "summary": "Fetch survey responses results table",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          },
          {
            "name": "since",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Limit submitted responders since the specified date and time, inclusive. Must be passed in ISO 8601 format with timezone.(example: 2023-03-20T14:00:59%2B01:00)\n"
          },
          {
            "name": "until",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Limit submitted responders until the specified date and time, inclusive. Must be passed in ISO 8601 format with timezone.(example: 2023-03-20T14:00:59%2B01:00)\n"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Set responders sort criteria in this format:  \n  **{col_type},{object_id},{asc|desc}**  \n- **col_type:**  \n  - 1: question\n  - 2: variable\n  - 3: static variable\n  - 4: choice\n  - 5: picture choice\n  - 6: ranking choice\n  - 7: computational variable\n- **object_id:** id of the column type object\n- **asc | desc:** order responders ascending or descending\n"
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "Id of the filter to apply on results\n"
          },
          {
            "name": "inline_filter",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Apply inline filter on results in this format:  \n  **{first_operand_type},{first_operand_id},{operator},{second_operand_type},{second_operand_value}**  \n- **first_operand:** \n  - question id e.g *1,98776*\n  - static variables\n    - score: *3*\n    - responder start time: *4*\n    - responder submit time: *5*\n    - responder last edit time: *6*\n  - variable id e.g *2,3123*\n  - computational variable id e.g *7,4567*\n- **operator:**\n  - 1: is equal to\n  - 2: is not equal to\n  - 3: begins with\n  - 4: ends with\n  - 5: contains\n  - 6: does not contain\n  - 7: is before\n  - 8: is after\n  - 9: is equal or before\n  - 10: is equal or after\n  - 11: smaller than\n  - 12: greater than\n  - 13: is equal or greater\n  - 14: is equal or smaller\n- **second_operand:**\n  - text: *1,string*\n  - integer: *2,1234*\n  - choice id e.g *3,1234*\n  - picture choice id e.g *4,1234*\n  - drop down choice id e.g *5,1234*\n"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 30,
              "maximum": 1000
            },
            "description": "Maximum number of responders in a page. If you have fewer than 1000 responses, you can retrieve all of the responders in a single request by adding the page_size parameter.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content_Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "responders_count": {
                      "type": "integer",
                      "description": "Total number of responders in the retrieved query"
                    },
                    "invisible_responders_count": {
                      "type": "integer",
                      "description": "Total number of responders in the retrieved query invisible due to user plan limitations"
                    },
                    "header": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "body": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "integer"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/surveys/{survey_id}/responses/export/": {
      "get": {
        "tags": [
          "Results"
        ],
        "summary": "Fetch survey responses export",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          },
          {
            "name": "export_format",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Select export format. 1: xlsx, 2: csv.\n"
          },
          {
            "name": "since",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Limit submitted responders since the specified date and time, inclusive. Must be passed in ISO 8601 format with timezone.(example: 2023-03-20T14:00:59%2B01:00)\n"
          },
          {
            "name": "until",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Limit submitted responders until the specified date and time, inclusive. Must be passed in ISO 8601 format with timezone.(example: 2023-03-20T14:00:59%2B01:00)\n"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Set responders sort criteria in this format:  \n  **{col_type},{object_id},{asc|desc}**  \n- **col_type:**  \n  - 1: question\n  - 2: variable\n  - 3: static variable\n  - 4: choice\n  - 5: picture choice\n  - 6: ranking choice\n  - 7: computational variable\n- **object_id:** id of the column type object\n- **asc | desc:** order responders ascending or descending\n"
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "Id of the filter to apply on results\n"
          },
          {
            "name": "inline_filter",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Apply inline filter on results in this format:  \n  **{first_operand_type},{first_operand_id},{operator},{second_operand_type},{second_operand_value}**  \n- **first_operand:** \n  - question id e.g *1,98776*\n  - static variables\n    - score: *3*\n    - responder start time: *4*\n    - responder submit time: *5*\n    - responder last edit time: *6*\n  - variable id e.g *2,3123*\n  - computational variable id e.g *7,4567*\n- **operator:**\n  - 1: is equal to\n  - 2: is not equal to\n  - 3: begins with\n  - 4: ends with\n  - 5: contains\n  - 6: does not contain\n  - 7: is before\n  - 8: is after\n  - 9: is equal or before\n  - 10: is equal or after\n  - 11: smaller than\n  - 12: greater than\n  - 13: is equal or greater\n  - 14: is equal or smaller\n- **second_operand:**\n  - text: *1,string*\n  - integer: *2,1234*\n  - choice id e.g *3,1234*\n  - picture choice id e.g *4,1234*\n  - drop down choice id e.g *5,1234*\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content_Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "export": {
                      "type": "string",
                      "description": "Export url"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/surveys/{survey_id}/notifications/": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Create notification",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/EmailNotification"
                  },
                  {
                    "$ref": "#/components/schemas/SMSNotification"
                  },
                  {
                    "$ref": "#/components/schemas/WebhookNotification"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created notification object",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/EmailNotification"
                    },
                    {
                      "$ref": "#/components/schemas/SMSNotification"
                    },
                    {
                      "$ref": "#/components/schemas/WebhookNotification"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/v2/surveys/<integer>/notifications/\"\n\npayload = json.dumps({\n  \"body\": \"<string>\",\n  \"recipient_type\": 1,\n  \"subject\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"survey\": \"<integer>\",\n  \"enabled\": True,\n  \"sending_method\": 1,\n  \"filter\": \"<integer>\",\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"question_recipient\": \"<integer>\",\n  \"variable_recipient\": \"<integer>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/v2/surveys/<integer>/notifications/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"body\": \"<string>\",\n    \"recipient_type\": 1,\n    \"subject\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"survey\": \"<integer>\",\n    \"enabled\": true,\n    \"sending_method\": 1,\n    \"filter\": \"<integer>\",\n    \"recipients\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"question_recipient\": \"<integer>\",\n    \"variable_recipient\": \"<integer>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Authorization: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"https://survey.porsline.ir/api/v2/surveys/<integer>/notifications/\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nrequest.Headers.Add(\"Authorization\", \"\");\nvar content = new StringContent(\"{\\n\\t\\\"body\\\": \\\"<string>\\\",\\n\\t\\\"recipient_type\\\": 1,\\n\\t\\\"subject\\\": \\\"<string>\\\",\\n\\t\\\"id\\\": \\\"<integer>\\\",\\n\\t\\\"survey\\\": \\\"<integer>\\\",\\n\\t\\\"enabled\\\": true,\\n\\t\\\"sending_method\\\": 1,\\n\\t\\\"filter\\\": \\\"<integer>\\\",\\n\\t\\\"recipients\\\": [\\n\\t\\t\\\"<string>\\\",\\n\\t\\t\\\"<string>\\\"\\n\\t],\\n\\t\\\"question_recipient\\\": \\\"<integer>\\\",\\n\\t\\\"variable_recipient\\\": \\\"<integer>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'https://survey.porsline.ir/api/v2/surveys/<integer>/notifications/',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Authorization': ''\n  },\n  body: JSON.stringify({\n    \"body\": \"<string>\",\n    \"recipient_type\": 1,\n    \"subject\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"survey\": \"<integer>\",\n    \"enabled\": true,\n    \"sending_method\": 1,\n    \"filter\": \"<integer>\",\n    \"recipients\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"question_recipient\": \"<integer>\",\n    \"variable_recipient\": \"<integer>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      },
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get survey notifications list",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          }
        ],
        "responses": {
          "200": {
            "description": "Survey notifications list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/EmailNotification"
                      },
                      {
                        "$ref": "#/components/schemas/SMSNotification"
                      },
                      {
                        "$ref": "#/components/schemas/WebhookNotification"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/surveys/{survey_id}/notifications/{pk}/": {
      "patch": {
        "tags": [
          "Notifications"
        ],
        "summary": "Update notification",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Notification ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/EmailNotification"
                  },
                  {
                    "$ref": "#/components/schemas/SMSNotification"
                  },
                  {
                    "$ref": "#/components/schemas/WebhookNotification"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated notification object",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/EmailNotification"
                    },
                    {
                      "$ref": "#/components/schemas/SMSNotification"
                    },
                    {
                      "$ref": "#/components/schemas/WebhookNotification"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://survey.porsline.ir/api/v2/surveys/<integer>/notifications/<integer>/\"\n\npayload = json.dumps({\n  \"body\": \"<string>\",\n  \"recipient_type\": 1,\n  \"subject\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"survey\": \"<integer>\",\n  \"enabled\": True,\n  \"sending_method\": 1,\n  \"filter\": \"<integer>\",\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"question_recipient\": \"<integer>\",\n  \"variable_recipient\": \"<integer>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': ''\n}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "php",
            "label": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://survey.porsline.ir/api/v2/surveys/<integer>/notifications/<integer>/',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'PATCH',\n  CURLOPT_POSTFIELDS =>'{\n    \"body\": \"<string>\",\n    \"recipient_type\": 1,\n    \"subject\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"survey\": \"<integer>\",\n    \"enabled\": true,\n    \"sending_method\": 1,\n    \"filter\": \"<integer>\",\n    \"recipients\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"question_recipient\": \"<integer>\",\n    \"variable_recipient\": \"<integer>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Authorization: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Patch, \"https://survey.porsline.ir/api/v2/surveys/<integer>/notifications/<integer>/\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nrequest.Headers.Add(\"Authorization\", \"\");\nvar content = new StringContent(\"{\\n\\t\\\"body\\\": \\\"<string>\\\",\\n\\t\\\"recipient_type\\\": 1,\\n\\t\\\"subject\\\": \\\"<string>\\\",\\n\\t\\\"id\\\": \\\"<integer>\\\",\\n\\t\\\"survey\\\": \\\"<integer>\\\",\\n\\t\\\"enabled\\\": true,\\n\\t\\\"sending_method\\\": 1,\\n\\t\\\"filter\\\": \\\"<integer>\\\",\\n\\t\\\"recipients\\\": [\\n\\t\\t\\\"<string>\\\",\\n\\t\\t\\\"<string>\\\"\\n\\t],\\n\\t\\\"question_recipient\\\": \\\"<integer>\\\",\\n\\t\\\"variable_recipient\\\": \\\"<integer>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var request = require('request');\nvar options = {\n  'method': 'PATCH',\n  'url': 'https://survey.porsline.ir/api/v2/surveys/<integer>/notifications/<integer>/',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Authorization': ''\n  },\n  body: JSON.stringify({\n    \"body\": \"<string>\",\n    \"recipient_type\": 1,\n    \"subject\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"survey\": \"<integer>\",\n    \"enabled\": true,\n    \"sending_method\": 1,\n    \"filter\": \"<integer>\",\n    \"recipients\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"question_recipient\": \"<integer>\",\n    \"variable_recipient\": \"<integer>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
          }
        ]
      },
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get notification",
        "parameters": [
          {
            "$ref": "#/components/parameters/SurveyID"
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Notification ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Notification object",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/EmailNotification"
                    },
                    {
                      "$ref": "#/components/schemas/SMSNotification"
                    },
                    {
                      "$ref": "#/components/schemas/WebhookNotification"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Folder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Folder's ID",
            "readOnly": true
          },
          "order": {
            "type": "integer",
            "description": "Folder's location among other folders"
          },
          "name": {
            "type": "string",
            "description": "Folder's name",
            "minLength": 1,
            "maxLength": 100
          },
          "shared_by": {
            "type": "object",
            "description": "Details of owner of the folder if it's shared with request user",
            "properties": {
              "email": {
                "type": "string",
                "format": "email"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "user_type": {
                "type": "integer",
                "format": "int32",
                "enum": [
                  1,
                  2,
                  3
                ],
                "description": "\"1: free, 2: pro, 3: enterprise\""
              }
            },
            "nullable": true,
            "readOnly": true
          },
          "shared_with": {
            "type": "array",
            "description": "List of users' emails whom this folder is shared with, it's always None for folders list",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "sub_user": {
                  "type": "integer",
                  "format": "int32",
                  "description": "ID of the sub-user the folder is shared with"
                }
              }
            },
            "nullable": true,
            "readOnly": true
          },
          "surveys": {
            "type": "array",
            "description": "List of folder's surveys",
            "nullable": true,
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32"
                },
                "name": {
                  "type": "string"
                },
                "folder_id": {
                  "type": "integer",
                  "format": "int32"
                },
                "language": {
                  "type": "integer",
                  "enum": [
                    1,
                    2,
                    3,
                    4
                  ],
                  "description": "1: English, 2: Persian, 3: Turkish, 4: Arabic"
                },
                "created_date": {
                  "type": "string",
                  "format": "date-time"
                },
                "active": {
                  "type": "boolean",
                  "description": "Whether survey is active or not"
                },
                "is_stopped": {
                  "type": "boolean",
                  "description": "Whether survey is stopped or not"
                },
                "views": {
                  "type": "integer",
                  "description": "The number of survey views"
                },
                "submitted_responses": {
                  "type": "integer",
                  "description": "The number of submitted responses"
                },
                "preview_code": {
                  "type": "string",
                  "description": "Responders can answer the survey using this code"
                },
                "report_code": {
                  "type": "string",
                  "description": "You can share survey report with other people with this code"
                },
                "url_slug": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 200,
                  "description": "Survey custom url slug replacing default preview code"
                },
                "is_template": {
                  "type": "boolean",
                  "description": "Whether survey is a template or not"
                },
                "question_count": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of survey's questions"
                },
                "theme": {
                  "$ref": "#/components/schemas/Theme"
                },
                "subdomain": {
                  "$ref": "#/components/schemas/UserSubdomain"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "order",
          "name",
          "shared_by",
          "shared_with"
        ]
      },
      "UserSubdomain": {
        "type": "object",
        "title": "Subdomain",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "subdomain": {
            "type": "string",
            "maxLength": 50,
            "nullable": true
          },
          "is_active": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "Survey": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "folder_id": {
            "type": "integer",
            "format": "int32"
          },
          "language": {
            "type": "string"
          },
          "active": {
            "type": "boolean",
            "readOnly": true
          },
          "closed": {
            "type": "boolean",
            "readOnly": true
          },
          "deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "preview_code": {
            "type": "string",
            "readOnly": true
          },
          "report_code": {
            "type": "string",
            "readOnly": true
          },
          "submitted_responses": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "theme": {
            "$ref": "#/components/schemas/Theme"
          },
          "settings": {
            "$ref": "#/components/schemas/GeneralSettings"
          },
          "questions": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "title": "TextQuestion",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TextQuestion"
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Score"
                      }
                    }
                  ]
                },
                {
                  "title": "MultipleChoiceQuestion",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MultipleChoiceQuestion"
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Score"
                      }
                    }
                  ]
                },
                {
                  "title": "PictureChoiceQuestion",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PictureChoiceQuestion"
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Score"
                      }
                    }
                  ]
                },
                {
                  "title": "StatementQuestion",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StatementQuestion"
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Score"
                      }
                    }
                  ]
                },
                {
                  "title": "OpinionScaleQuestion",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/OpinionScaleQuestion"
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Score"
                      }
                    }
                  ]
                },
                {
                  "title": "RatingQuestion",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RatingQuestion"
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Score"
                      }
                    }
                  ]
                },
                {
                  "title": "GroupQuestion",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GroupQuestion"
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Score"
                      }
                    }
                  ]
                },
                {
                  "title": "DropDownQuestion",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/DropDownQuestion"
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Score"
                      }
                    }
                  ]
                },
                {
                  "title": "RankingQuestion",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RankingQuestion"
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Score"
                      }
                    }
                  ]
                },
                {
                  "title": "UploadFileQuestion",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UploadFileQuestion"
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Score"
                      }
                    }
                  ]
                },
                {
                  "title": "MatrixQuestion",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MatrixQuestion"
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    {
                      "type": "array",
                      "title": "edges",
                      "items": {
                        "$ref": "#/components/schemas/Score"
                      }
                    }
                  ]
                }
              ]
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "integer",
                  "format": "int32"
                },
                "variable_source": {
                  "type": "integer",
                  "format": "int32"
                },
                "has_response": {
                  "type": "boolean"
                }
              }
            }
          },
          "welcome": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WelcomeQuestion"
            }
          },
          "appreciations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appreciation"
            }
          }
        }
      },
      "GeneralSettings": {
        "type": "object",
        "properties": {
          "authentication_needed": {
            "type": "boolean",
            "default": false
          },
          "porsline_auth": {
            "type": "boolean",
            "default": false
          },
          "code_auth": {
            "type": "boolean",
            "default": false
          },
          "edit_response_enabled": {
            "type": "boolean",
            "default": false
          },
          "show_answer_sheet_enabled": {
            "type": "boolean",
            "default": false
          },
          "show_answer_sheet_to_responder": {
            "type": "boolean",
            "default": false
          },
          "show_answer_key_after_response_submit": {
            "type": "boolean",
            "default": false
          },
          "show_answer_key_after_survey_stop": {
            "type": "boolean",
            "default": false
          },
          "phone_number_auth": {
            "type": "boolean",
            "default": false
          },
          "phone_number_auth_is_unique": {
            "type": "boolean",
            "default": true
          },
          "phone_numbers_limited": {
            "type": "boolean",
            "default": false
          },
          "responding_duration_type": {
            "type": "integer",
            "enum": [
              1,
              2,
              3
            ],
            "default": 1,
            "description": "1: Survey Responding Duration, 2: Uniform Question Responding Duration, 3: Non-Uniform Question Responding Duration"
          },
          "questions_responding_duration": {
            "type": "string",
            "description": "A duration string like, \"00:02:30\""
          }
        }
      },
      "Question": {
        "type": "object",
        "required": [
          "title",
          "type"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "maxLength": 1500
          },
          "html_title": {
            "type": "string",
            "maxLength": 3000
          },
          "type": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 13
          },
          "image_video_active": {
            "type": "boolean",
            "default": false
          },
          "image_or_video": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "default": 1
          },
          "image_path": {
            "type": "string",
            "format": "url"
          },
          "image_name": {
            "type": "string",
            "maxLength": 500
          },
          "video_url": {
            "type": "string",
            "format": "url",
            "maxLength": 500
          },
          "show_charts": {
            "type": "boolean",
            "default": true
          },
          "description_text_active": {
            "type": "boolean",
            "default": false
          },
          "description_text": {
            "type": "string",
            "maxLength": 2500
          },
          "html_description_text": {
            "type": "string",
            "maxLength": 5000
          },
          "related_group": {
            "type": "integer",
            "format": "int32",
            "description": "related group question Id"
          },
          "question_number_is_hidden": {
            "type": "boolean",
            "default": false
          },
          "prior_question": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true,
            "description": "Prior question Id to place question after that"
          },
          "responding_duration": {
            "type": "string",
            "description": "A duration string like, \"00:03:20\""
          }
        }
      },
      "WelcomeQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "WelcomeQuestion",
            "properties": {
              "title_active": {
                "type": "boolean",
                "default": true
              },
              "description_active": {
                "type": "boolean",
                "default": false
              },
              "description": {
                "type": "string",
                "maxLength": 2500
              },
              "enter_text": {
                "type": "string",
                "maxLength": 80
              }
            }
          }
        ]
      },
      "TextQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "TextQuestion",
            "properties": {
              "answer_type": {
                "type": "integer",
                "default": 1,
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ],
                "description": "1 is long text, 2 is short text, 3 is number, 4 is email, 5 is link"
              },
              "number_max_value": {
                "type": "integer",
                "default": 2000000000
              },
              "number_min_value": {
                "type": "integer",
                "default": 0
              },
              "answer_max_length": {
                "type": "integer",
                "default": 1000,
                "maximum": 5000,
                "minimum": 1
              },
              "answer_min_length": {
                "type": "integer",
                "default": 1000,
                "maximum": 5000,
                "minimum": 1
              },
              "answer_required": {
                "type": "boolean",
                "default": false
              },
              "is_decimal": {
                "type": "boolean",
                "default": false
              },
              "correct_numeric_answer": {
                "type": "integer",
                "format": "float"
              },
              "regex_type": {
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12
                ],
                "description": "1\\:\\ free text, 2\\:\\ jalaali date, 3\\:\\ gregorian date, 4\\:\\ mobile number,\n5\\:\\ telephone number, 6\\:\\ numeric field, 7\\:\\ survey language letters,\n8\\:\\ English letters, 9\\:\\ letters and numbers, 10\\:\\ time, 11\\:\\ IP, 12\\:\\ custom"
              },
              "regex_value": {
                "type": "string",
                "maxLength": 800
              },
              "regex_placeholder": {
                "type": "string",
                "maxLength": 100
              },
              "regex_validation_message": {
                "type": "string",
                "maxLength": 200
              }
            }
          }
        ]
      },
      "MultipleChoiceQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "MultipleChoiceQuestion",
            "properties": {
              "allow_multiple_select": {
                "type": "boolean",
                "default": false
              },
              "max_selectable_choices": {
                "type": "integer",
                "minimum": 1,
                "maximum": 30,
                "default": 2
              },
              "min_selectable_choices": {
                "type": "integer",
                "minimum": 0,
                "maximum": 30,
                "default": 2
              },
              "vertical_choices": {
                "type": "boolean",
                "default": false
              },
              "answer_required": {
                "type": "boolean",
                "default": false
              },
              "randomize": {
                "type": "boolean",
                "default": false
              },
              "correct_choice_id": {
                "type": "integer",
                "format": "int32",
                "writeOnly": true
              },
              "correct_choice": {
                "$ref": "#/components/schemas/Choice"
              },
              "related_matrix_question": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "choices": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Choice"
                }
              }
            }
          }
        ]
      },
      "PictureChoiceQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "PictureChoiceQuestion",
            "properties": {
              "allow_multiple_select": {
                "type": "boolean",
                "default": false
              },
              "max_selectable_choices": {
                "type": "integer",
                "minimum": 1,
                "maximum": 30,
                "default": 2
              },
              "min_selectable_choices": {
                "type": "integer",
                "minimum": 0,
                "maximum": 30,
                "default": 2
              },
              "super_size_choice": {
                "type": "boolean",
                "default": false
              },
              "answer_required": {
                "type": "boolean",
                "default": false
              },
              "remove_labels": {
                "type": "boolean",
                "default": false
              },
              "randomize": {
                "type": "boolean",
                "default": false
              },
              "correct_choice_id": {
                "type": "integer",
                "format": "int32",
                "writeOnly": true
              },
              "correct_choice": {
                "$ref": "#/components/schemas/PictureChoice"
              },
              "choices": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PictureChoice"
                }
              }
            }
          }
        ]
      },
      "StatementQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "StatementQuestion",
            "properties": {
              "continue_text": {
                "type": "string",
                "maxLength": 120
              }
            }
          }
        ]
      },
      "OpinionScaleQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "OpinionScaleQuestion",
            "properties": {
              "steps": {
                "type": "integer",
                "default": 5,
                "minimum": 0,
                "maximum": 11
              },
              "right_label": {
                "type": "string",
                "maxLength": 100
              },
              "center_label": {
                "type": "string",
                "maxLength": 100
              },
              "left_label": {
                "type": "string",
                "maxLength": 100
              },
              "start_point": {
                "type": "boolean",
                "default": false
              },
              "answer_required": {
                "type": "boolean",
                "default": false
              },
              "scale_type": {
                "type": "integer",
                "default": 1
              }
            }
          }
        ]
      },
      "RatingQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "RatingQuestion",
            "properties": {
              "steps": {
                "type": "integer",
                "default": 5,
                "minimum": 1,
                "maximum": 10
              },
              "icon_type": {
                "type": "integer",
                "default": 1,
                "enum": [
                  1,
                  2,
                  3,
                  4
                ],
                "description": "\"1: stars, 2: hearts, 3: thumbs up, 4: smile emoji\""
              },
              "answer_required": {
                "type": "boolean",
                "default": false
              }
            }
          }
        ]
      },
      "GroupQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "GroupQuestion",
            "properties": {
              "continue_text": {
                "type": "string",
                "maxLength": 120
              },
              "continue_btn_active": {
                "type": "boolean",
                "default": false
              },
              "subquestions_are_shuffled": {
                "type": "boolean",
                "default": false
              },
              "number_of_visible_subquestions": {
                "type": "integer",
                "minimum": 1
              }
            }
          }
        ]
      },
      "Appreciation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "Appreciation",
            "properties": {
              "share_link_active": {
                "type": "boolean",
                "default": false
              },
              "is_default": {
                "type": "boolean",
                "default": true
              },
              "link_active": {
                "type": "boolean",
                "default": true
              },
              "link_button_text": {
                "type": "string",
                "maxLength": 60
              },
              "link_type": {
                "type": "integer",
                "default": 1,
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5,
                  6
                ],
                "description": "\"1: current survey response page, 2: current survey reports page,\n3: other link, 4: edit link, 5: review link\""
              },
              "link": {
                "type": "integer",
                "format": "url",
                "maxLength": 500
              },
              "reload_active": {
                "type": "boolean",
                "default": false
              },
              "reload_time": {
                "type": "integer",
                "default": 10,
                "minimum": 0,
                "maximum": 1000
              }
            }
          }
        ]
      },
      "RankingQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "RankingQuestion",
            "properties": {
              "randomize": {
                "type": "boolean",
                "default": false
              },
              "answer_required": {
                "type": "boolean",
                "default": false
              },
              "choices": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RankingChoice"
                }
              }
            }
          }
        ]
      },
      "DropDownQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "DropDownQuestion",
            "properties": {
              "answer_required": {
                "type": "boolean",
                "default": false
              },
              "randomize": {
                "type": "boolean",
                "default": false
              },
              "correct_choice_id": {
                "type": "integer",
                "format": "int32",
                "writeOnly": true
              },
              "correct_choice": {
                "$ref": "#/components/schemas/Choice"
              },
              "alphabetical_order": {
                "type": "boolean",
                "default": false
              },
              "choices": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DropDownChoice"
                }
              }
            }
          }
        ]
      },
      "UploadFileQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "UploadFileQuestion",
            "properties": {
              "answer_required": {
                "type": "boolean",
                "default": false
              },
              "max_file_size": {
                "type": "integer",
                "default": 5000,
                "minimum": 50,
                "maximum": 50000
              }
            }
          }
        ]
      },
      "MatrixQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "MatrixQuestion",
            "required": [
              "row_type",
              "rows",
              "columns"
            ],
            "properties": {
              "answer_required": {
                "type": "boolean",
                "default": false
              },
              "allow_multiple_select": {
                "type": "boolean",
                "default": false
              },
              "row_type": {
                "type": "integer",
                "default": 3
              },
              "columns": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                    },
                    "name": {
                      "type": "string"
                    },
                    "alt_name": {
                      "type": "string"
                    }
                  }
                }
              },
              "rows": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "title"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                    },
                    "title": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "Choice": {
        "title": "Choice",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "maxLength": 200
          },
          "alt_name": {
            "type": "string",
            "maxLength": 200
          },
          "hidden": {
            "type": "boolean",
            "default": false
          },
          "choice_type": {
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4
            ],
            "default": 1,
            "description": "\"1: normal choice, 2: all choice, 3: none choice, 4: others choice\""
          }
        }
      },
      "PictureChoice": {
        "title": "PictureChoice",
        "required": [
          "label"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "maxLength": 200
          },
          "image": {
            "type": "string",
            "format": "url"
          },
          "image_file_name": {
            "type": "string",
            "maxLength": 500
          },
          "svg": {
            "type": "string"
          },
          "alt_name": {
            "type": "string",
            "maxLength": 200
          },
          "hidden": {
            "type": "boolean",
            "default": false
          },
          "choice_type": {
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4
            ],
            "default": 1,
            "description": "\"1: normal choice, 2: all choice, 3: none choice, 4: others choice\""
          }
        }
      },
      "DropDownChoice": {
        "title": "DropDownChoice",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "maxLength": 200
          }
        }
      },
      "RankingChoice": {
        "title": "RankingChoice",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "maxLength": 200
          }
        }
      },
      "Edge": {
        "title": "Edge",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "question": {
            "type": "integer",
            "format": "int32"
          },
          "destination": {
            "type": "integer",
            "format": "int32"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          }
        }
      },
      "Condition": {
        "title": "Condition",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "boolean_operator": {
            "type": "integer",
            "default": 1,
            "enum": [
              1,
              2
            ],
            "description": "\"1: and, 2: or\""
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "logical_operator": {
            "type": "integer",
            "default": 1,
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14
            ],
            "description": "\"1: is equal to, 2: is not equal to, 3: begins with, 4: ends with, 5: contains,\n6: does not contain, 7: is before, 8: is after, 9: is equal or after, 10: is equal or before,\n11: smaller than, 12: greater than, 13: is equal or greater, 14: is equal or smaller\""
          },
          "first_operand": {
            "$ref": "#/components/schemas/FirstOperand"
          },
          "second_operand": {
            "$ref": "#/components/schemas/SecondOperand"
          }
        }
      },
      "FirstOperand": {
        "title": "FirstOperand",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "type": {
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ],
            "description": "\"1: question, 2: variable, 3: score, 4: start datetime, 5: submitted datetime,\n6: last edit datetime, 7: computational_variable\""
          },
          "question": {
            "type": "integer",
            "format": "int32"
          },
          "variable": {
            "type": "integer",
            "format": "int32"
          },
          "computational_variable": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SecondOperand": {
        "title": "SecondOperand",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "description": "\"1: text, 2: int, 3: choice, 4: picture choice, 5: drop down choice\""
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Score": {
        "title": "Score",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "second_operand": {
            "$ref": "#/components/schemas/SecondOperand"
          },
          "logical_operator": {
            "type": "integer",
            "default": 1,
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14
            ],
            "description": "\"1: is equal to, 2: is not equal to, 3: begins with, 4: ends with, 5: contains,\n6: does not contain, 7: is before, 8: is after, 9: is equal or after, 10: is equal or before,\n11: smaller than, 12: greater than, 13: is equal or greater, 14: is equal or smaller\""
          },
          "arithmetic_operator": {
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4
            ],
            "description": "\"1: +, 2: -, 3: *, 4: /\""
          }
        }
      },
      "ExternalService": {
        "title": "ExternalService",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "integer",
            "enum": [
              1
            ],
            "description": "\"1: gateway,\""
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "logo": {
            "type": "string",
            "format": "url",
            "maxLength": 300
          },
          "is_active": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "PaymentQuestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Question"
          },
          {
            "title": "PaymentQuestion",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32"
              },
              "answer_required": {
                "type": "boolean",
                "default": false
              },
              "currency": {
                "type": "string",
                "maxLength": 3,
                "enum": [
                  "IRR",
                  "EUR",
                  "TRY"
                ],
                "description": "\"IRR: Rials, EUR: Euro, TRY: Lira\""
              },
              "price": {
                "type": "number",
                "format": "float"
              },
              "gateway_service": {
                "type": "object",
                "$ref": "#/components/schemas/ExternalService"
              },
              "price_source": {
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3
                ],
                "description": "\"1: constant, 2:score, 3:computational variable\""
              }
            }
          }
        ]
      },
      "Notification": {
        "type": "object",
        "required": [
          "body",
          "recipient_type"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Notification ID",
            "readOnly": true
          },
          "survey": {
            "type": "integer",
            "format": "int32",
            "description": "Notification survey ID",
            "readOnly": true
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Designates of whether notification is enabled or not"
          },
          "sending_method": {
            "type": "integer",
            "default": 1,
            "enum": [
              1,
              2,
              3
            ],
            "description": "Notification's sending method. 1: email, 2: sms, 3: webhook\n"
          },
          "recipient_type": {
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "description": "Notification's recipient type. 1: self notification, 2: question recipient,\n3: variable recipient, 4: respondent user, 5: webhook endpoint\n"
          },
          "body": {
            "type": "string",
            "description": "Notification body"
          },
          "filter": {
            "type": "integer",
            "format": "int32",
            "description": "Notification filter ID to be applied on sending"
          }
        }
      },
      "EmailNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Notification"
          },
          {
            "type": "object",
            "required": [
              "subject"
            ],
            "properties": {
              "subject": {
                "type": "string",
                "description": "Email subject"
              },
              "recipients": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of recipients email addresses"
              },
              "question_recipient": {
                "type": "integer",
                "format": "int32",
                "description": "Question ID that recipient value must be read from it's answer.\nMust be text question with email answer type.\n"
              },
              "variable_recipient": {
                "type": "integer",
                "format": "int32",
                "description": "Variable ID that recipient value must be read from it's value.\nMust be with text type.\n"
              }
            }
          }
        ]
      },
      "SMSNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Notification"
          },
          {
            "type": "object",
            "properties": {
              "recipients": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of recipients phone numbers"
              },
              "question_recipient": {
                "type": "integer",
                "format": "int32",
                "description": "Question ID that recipient value must be read from it's answer.\nMust be text question with phone number regex type.\n"
              },
              "variable_recipient": {
                "type": "integer",
                "format": "int32",
                "description": "Variable ID that recipient value must be read from it's value.\nMust be with text type.\n"
              },
              "sms_integration": {
                "type": "integer",
                "format": "int32",
                "description": "SMS integration to use for sending sms notifications"
              }
            }
          }
        ]
      },
      "WebhookNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Notification"
          },
          {
            "type": "object",
            "required": [
              "webhook_endpoint",
              "webhook_headers"
            ],
            "properties": {
              "webhook_endpoint": {
                "type": "string",
                "description": "Webhook endpoint url"
              },
              "webhook_headers": {
                "type": "object",
                "description": "Webhook headers json"
              },
              "webhook_method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "DELETE"
                ],
                "default": "POST"
              }
            }
          }
        ]
      },
      "Theme": {
        "title": "Theme",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "background_color": {
            "type": "string",
            "maxLength": 20
          },
          "question_color": {
            "type": "string",
            "maxLength": 20
          },
          "answer_color": {
            "type": "string",
            "maxLength": 20
          },
          "button_color": {
            "type": "string",
            "maxLength": 20
          },
          "accent_color": {
            "type": "string",
            "maxLength": 20
          },
          "font_family": {
            "type": "integer",
            "format": "int32",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13
            ],
            "default": 1,
            "description": "1: Default, 2: IRAN SANS, 3: Vazir, 4: Yekan, 5: Dana, 6: IBM Plex Sans Arabic,\n7: Noto Kufi Arabic, 8: Noto Sans Arabic, 9: Roboto, 10: Open Sans, 11: Source Sans Pro,\n12: Raleway, 13: PT Sans, 14: Figtree, 15: Lateef, 16: Scheherazade\n"
          },
          "font_size": {
            "type": "integer",
            "format": "int32",
            "default": 13,
            "minimum": 12,
            "maximum": 20
          },
          "background_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BackgroundImage"
              }
            ],
            "readOnly": true
          },
          "background_image_id": {
            "type": "integer",
            "format": "int32"
          },
          "background_image_repeat": {
            "type": "integer",
            "format": "int32",
            "enum": [
              1,
              2,
              3
            ],
            "default": 3,
            "description": "1: repeat, 2: no-repeat, 3: cover"
          },
          "background_image_brightness": {
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 0,
            "maximum": 100
          },
          "background_image_fit": {
            "type": "integer",
            "format": "int32",
            "enum": [
              1,
              2
            ],
            "default": 2,
            "description": "1: contain, 2: cover"
          },
          "background_image_position": {
            "type": "integer",
            "format": "int32",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9
            ],
            "default": 5,
            "description": "1: top-left, 2: top-middle, 3: top-right, 4: middle-left, 5: middle-middle, 6: middle-right, 7: down-left, 8: down-middle, 9: down-right"
          },
          "background_image_size_percentage": {
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 0,
            "maximum": 100
          },
          "is_public": {
            "type": "boolean",
            "default": false
          },
          "thumbnail_url": {
            "type": "string",
            "format": "url",
            "readOnly": true
          }
        }
      },
      "BackgroundImage": {
        "title": "BackgroundImage",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "url",
            "maxLength": 300
          },
          "thumbnail_url": {
            "type": "string",
            "format": "url"
          }
        }
      },
      "WebhookNotificationMessage": {
        "title": "WebhookNotificationMessage",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body of the webhook notification message sent to wenhook endpoint"
          },
          "recipients": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 200
            }
          },
          "success": {
            "type": "boolean",
            "description": "Shows wether or not the webhook was sent successfully"
          },
          "response": {
            "type": "string",
            "description": "The response returned by the webhook endpoint"
          },
          "status": {
            "type": "string",
            "maxLength": 8,
            "description": "The status code returned by the webhook endpoint"
          }
        }
      }
    },
    "parameters": {
      "SurveyID": {
        "name": "survey_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        },
        "description": "The id of the target survey. **Tip**: survey id is the number you can see in the build phase of that survey after \" /survey \" in the URL. <img src=https://media.porsline.com/share/survey-id.ir.jpg>"
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "name": "Authorization",
        "description": "To use API-Key, add <b>Authorization</b> header with following format:<br><br><b>Authorization: API-Key *********************</b><br><br>You can create API-Key for your account in security section:<br><br><a href='https://survey.porsline.ir/n/profile/apiKey/' class='button'>Generate API-Key</a>",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ]
}